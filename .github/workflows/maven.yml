# The purpose of this built action is to do the following:
# Build the docker image for the harbour web api application
# Push the image to ECR
# Update the ECS Task definition
# Deploy the new ECS service with the updated image
# Author: Terry Sposato
# Date: 05/08/2020

name: Build Spring and VueJS apps, deploy to Fargate and s3/CloudFront

env:
  AWS_DEFAULT_REGION: ap-southeast-2
  AWS_REGION: ap-southeast-2
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CONTAINER_IMAGE: freightmate-harbour-uat-application-api
  CLOUDFRONT_DISTRIBUTION: E31CYZIQR9FAD
  SERVICE_NAME: WebAPI
  CLUSTER_NAME: Harbour-UAT-Application
  CONTAINER_NAME: HarbourJavaAPI
  TAG: ${{ github.sha }}
  VUE_APP_ROOT_URL: https://api.uat.staging.freightmate.com
  NODE_VERSION: 12.x
  FRONT_END_WORKING_DIR: ./frontend
  BACK_END_WORKING_DIR: ./backend
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  push:
    branches:
      - master
      - development

  pull_request:
    branches:
      - master
      - development

jobs:
  build_harbour:
    name: Build Spring Container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.11
        id: setup-jdk
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Cache Maven packages
        id: setup-maven-cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Sonarcloud static analysis
        id: sonar-analysis
        run: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      - uses: actions/upload-artifact@master
        with:
          name: backend-jar
          path: ${{env.BACK_END_WORKING_DIR}}/target/*.jar

      - uses: actions/upload-artifact@master
        with:
          name: spa-dist
          path: ${{env.FRONT_END_WORKING_DIR}}/target/dist

      - name: Load harbour app jar
        id: load-harbour-app
        uses: actions/download-artifact@master
        with:
          name: backend-jar
          path: ./

      - name: Build and tag the image
        id: build-spring
        run: |
          docker build \
          -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:$TAG \
          -f docker/harbour/Dockerfile .

      - name: Setup ECR
        id: ecr-login
        run: |
          $( aws ecr get-login --no-include-email )

      - name: Push to ECR
        id: push-ecr
        run: |
          docker push \
          $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:$TAG \
          && echo "Image is $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:$TAG"

  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    needs: [build_harbour]
    steps:
      - uses: actions/checkout@v2

      - name: Render Amazon ECS task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: HarbourJavaAPI
          image: '${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ env.CONTAINER_IMAGE }}:${{ env.TAG }}'

      - name: Deploy to Amazon ECS service
        id: deploy-fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}

      - name: Load SPA artifacts
        id: deploy-spa
        uses: actions/download-artifact@master
        with:
          name: spa-dist
          path: ./frontend/target/dist

      - name: Deploy SPA to S3
        run: aws s3 cp --recursive frontend/target/dist s3://uat.staging.freightmate.com

      - name: Invalidate Existing Distribution
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION --path "/*"
