package com.freightmate.harbour.model;

import com.freightmate.harbour.service.FreightmateUserDetailsService;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import javax.validation.constraints.Pattern;
import java.time.LocalDateTime;
import java.util.*;

@NoArgsConstructor
@AllArgsConstructor
@Builder
@Getter
@Entity
public class User implements UserDetails {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    long id;

    @Column (nullable = false, unique = true, length = 100)
    String username;

    @Setter
    @Pattern(
            regexp = "\\A\\$2(a|y|b)?\\$(\\d\\d)\\$[./0-9A-Za-z]{53}",
            message = "Password must be valid bcrypt string",
            flags = Pattern.Flag.UNICODE_CASE
    )
    @Column (nullable = false)
    String password;

    @Column (nullable = false)
    String email;

    String brokerServiceEmail;

    @ManyToOne(fetch = FetchType.LAZY)
    User broker;

    @ManyToOne(fetch = FetchType.LAZY)
    User customer;

    @Column(nullable = false)
    Boolean isManifestingActive;

    @Column (nullable = false)
    @Enumerated(EnumType.STRING)
    UserRole userRole;

    @Enumerated(EnumType.STRING)
    Unit preferredUnit;

    @Column (length = 512)
    String token;

    LocalDateTime tokenCreatedAt;

    @Column(nullable = false)
    Boolean isDeleted;
    LocalDateTime deletedAt;

    @CreationTimestamp
    LocalDateTime createdAt;
    @UpdateTimestamp
    LocalDateTime updatedAt;

    // todo Add a updated by column to cover devs/admins/autogenerated updated by logic
    // https://stackoverflow.com/a/42165624 provides a nice example with spring security
    Integer deletedBy;
    Integer createdBy;
    Integer updatedBy;

    // Attempting to keep authorization as simple as possible, lets just use the roles rather than privs
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return Collections.singletonList(new SimpleGrantedAuthority(this.userRole.name()));
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    //todo inplement check of login failures here
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    //todo confirm if we want an expiring password
    @Override
    public boolean isCredentialsNonExpired() {
        return false;
    }

    //todo implement soft delete check
    @Override
    public boolean isEnabled() {
        return false;
    }
}
